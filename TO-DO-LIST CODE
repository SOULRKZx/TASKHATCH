<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TaskHatch - Hatch Your Ideas</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
  <style>
    :root {
      --bg: #e0eaff;
      --card: #f8fbff;
      --primary: #0077ff;
      --text: #333;
      --accent: #5f27cd;
      --done: #10ac84;
      --glass: rgba(255, 255, 255, 0.4);
      --dark: #1e1e2f;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Poppins', sans-serif;
    }

    body {
      background: var(--bg);
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 100vh;
      padding: 20px;
      transition: background 0.3s ease;
    }

    .wrapper {
      width: 100%;
      max-width: 600px;
      background: var(--card);
      border-radius: 20px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
      padding: 25px 30px;
      backdrop-filter: blur(10px);
    }

    .topbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .topbar h1 {
      font-size: 1.8rem;
      color: var(--primary);
    }

    .theme-switch {
      background: var(--primary);
      border: none;
      color: white;
      width: 40px;
      height: 40px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      transition: 0.3s;
    }

    .task-entry {
      margin: 25px 0;
      display: flex;
      gap: 10px;
    }

    .task-entry input {
      flex: 1;
      padding: 12px;
      border-radius: 10px;
      border: 1px solid #ccc;
      outline: none;
    }

    .task-entry button {
      background: var(--accent);
      border: none;
      color: white;
      padding: 12px 20px;
      border-radius: 10px;
      cursor: pointer;
      font-weight: 600;
      transition: 0.3s;
    }

    .task-entry button:hover {
      background: #341f97;
    }

    .filters {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-bottom: 15px;
    }

    .filters button {
      background: transparent;
      border: 2px solid var(--primary);
      color: var(--primary);
      padding: 6px 12px;
      border-radius: 20px;
      cursor: pointer;
      font-size: 0.85rem;
      transition: 0.3s;
    }

    .filters button.active,
    .filters button:hover {
      background: var(--primary);
      color: white;
    }

    ul.task-list {
      list-style: none;
      max-height: 300px;
      overflow-y: auto;
      padding-right: 8px;
    }

    .task {
      background: white;
      border-radius: 12px;
      padding: 12px 15px;
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }

    .task input[type="checkbox"] {
      width: 20px;
      height: 20px;
      cursor: pointer;
    }

    .task-text {
      flex: 1;
      margin-left: 15px;
      font-size: 1rem;
    }

    .task.completed .task-text {
      text-decoration: line-through;
      color: #aaa;
    }

    .task-actions button {
      background: none;
      border: none;
      color: var(--text);
      font-size: 1rem;
      cursor: pointer;
      margin-left: 10px;
    }

    .task-actions button:hover {
      color: var(--accent);
    }

    .stats {
      margin-top: 20px;
      font-size: 0.9rem;
      color: #555;
      display: flex;
      justify-content: space-between;
    }

    .dark-mode {
      --bg: #1e1e2f;
      --card: #2c2c3d;
      --text: #fff;
      --primary: #74b9ff;
      --accent: #a29bfe;
    }
  </style>
</head>
<body>
  <div class="wrapper">
    <div class="topbar">
      <h1>TaskHatch</h1>
      <button class="theme-switch" id="themeBtn">
        <i class="fas fa-moon"></i>
      </button>
    </div>

    <div class="task-entry">
      <input type="text" id="taskInput" placeholder="What needs to be done?" />
      <button id="addTask">Add</button>
    </div>

    <div class="filters">
      <button class="active" data-filter="all">All</button>
      <button data-filter="active">Active</button>
      <button data-filter="completed">Completed</button>
    </div>

    <ul class="task-list" id="taskList"></ul>

    <div class="stats">
      <span id="totalTasks">0 tasks</span>
      <span id="completedTasks">0 completed</span>
    </div>
  </div>

  <script>
    const taskInput = document.getElementById("taskInput");
    const addTaskBtn = document.getElementById("addTask");
    const taskList = document.getElementById("taskList");
    const filterBtns = document.querySelectorAll(".filters button");
    const themeBtn = document.getElementById("themeBtn");

    let tasks = JSON.parse(localStorage.getItem("taskHatchData")) || [];
    let filter = "all";

    const saveTasks = () => localStorage.setItem("taskHatchData", JSON.stringify(tasks));

    function renderTasks() {
      taskList.innerHTML = "";
      let visible = tasks.filter(task => {
        if (filter === "active") return !task.completed;
        if (filter === "completed") return task.completed;
        return true;
      });

      visible.forEach(task => {
        const li = document.createElement("li");
        li.className = `task ${task.completed ? "completed" : ""}`;

        li.innerHTML = `
          <input type="checkbox" ${task.completed ? "checked" : ""} />
          <span class="task-text">${task.text}</span>
          <div class="task-actions">
            <button class="edit"><i class="fas fa-edit"></i></button>
            <button class="delete"><i class="fas fa-trash"></i></button>
          </div>
        `;

        li.querySelector("input").addEventListener("change", () => {
          task.completed = !task.completed;
          saveTasks();
          renderTasks();
        });

        li.querySelector(".delete").addEventListener("click", () => {
          tasks = tasks.filter(t => t !== task);
          saveTasks();
          renderTasks();
        });

        li.querySelector(".edit").addEventListener("click", () => {
          const newText = prompt("Edit task:", task.text);
          if (newText) {
            task.text = newText;
            saveTasks();
            renderTasks();
          }
        });

        taskList.appendChild(li);
      });

      document.getElementById("totalTasks").textContent = `${tasks.length} tasks`;
      document.getElementById("completedTasks").textContent = `${tasks.filter(t => t.completed).length} completed`;
    }

    addTaskBtn.addEventListener("click", () => {
      const text = taskInput.value.trim();
      if (text) {
        tasks.unshift({ text, completed: false });
        saveTasks();
        renderTasks();
        taskInput.value = "";
      }
    });

    filterBtns.forEach(btn => {
      btn.addEventListener("click", () => {
        document.querySelector(".filters .active").classList.remove("active");
        btn.classList.add("active");
        filter = btn.dataset.filter;
        renderTasks();
      });
    });

    themeBtn.addEventListener("click", () => {
      document.body.classList.toggle("dark-mode");
      themeBtn.innerHTML = document.body.classList.contains("dark-mode")
        ? '<i class="fas fa-sun"></i>'
        : '<i class="fas fa-moon"></i>';
    });

    renderTasks();
  </script>
</body>
</html>
